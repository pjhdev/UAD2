<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <!-- 변수 지정 -->
    <property name="ALL_LOG_DIR" value="${LOG_PATH}/all"/>
    <property name="DOMAIN_LOG_DIR" value="${LOG_PATH}/domain"/>
    <property name="ATTENDANCE_LOG_DIR" value="${DOMAIN_LOG_DIR}/attendance"/>
    <property name="CALCULATION_LOG_DIR" value="${DOMAIN_LOG_DIR}/calculation"/>
    <property name="MATCHING_LOG_DIR" value="${DOMAIN_LOG_DIR}/matching"/>
    <property name="MEMBER_LOG_DIR" value="${DOMAIN_LOG_DIR}/member"/>
    <property name="NOTICE_LOG_DIR" value="${DOMAIN_LOG_DIR}/notice"/>

    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>

    <!-- 콘솔 출력 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %magenta([%thread]) %clr(%-5level) %logger{36} --- %clr(%msg){cyan} %n
            </pattern>
        </encoder>
    </appender>

    <!-- 전체 로그 파일 저장 -->
    <appender name="ALL_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${ALL_LOG_DIR}/spring-boot-log.log</file>

        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} --- %msg %n</pattern>
        </encoder>

        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${ALL_LOG_DIR}/spring-boot-log.%d{yyyy-MM-dd}_%i.log</fileNamePattern>
            <maxFileSize>100MB</maxFileSize>  <!-- 하나의 로그 파일 최대 크기 -->
            <maxHistory>30</maxHistory> <!-- 아카이브 된 파일의 최대 저장일. 해당일 이후 자동 삭제 -->
            <totalSizeCap>1GB</totalSizeCap>  <!-- 아카이브 된 모든 파일의 최대 크기 -->
        </rollingPolicy>
    </appender>

    <!-- attendance 도메인 로그 파일 저장 -->
    <appender name="ATTENDANCE_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${ATTENDANCE_LOG_DIR}/spring-boot-log.log</file>

        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} --- %msg %n</pattern>
        </encoder>

        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${ATTENDANCE_LOG_DIR}/spring-boot-log.%d{yyyy-MM-dd}_%i.log</fileNamePattern>
            <maxFileSize>50MB</maxFileSize>
            <maxHistory>30</maxHistory>
            <totalSizeCap>500MB</totalSizeCap>
        </rollingPolicy>
    </appender>

    <!-- calculation 도메인 로그 파일 저장-->
    <appender name="CALCULATION_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${CALCULATION_LOG_DIR}/spring-boot-log.log</file>

        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} --- %msg %n</pattern>
        </encoder>

        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${CALCULATION_LOG_DIR}/spring-boot-log.%d{yyyy-MM-dd}_%i.log</fileNamePattern>
            <maxFileSize>50MB</maxFileSize>
            <maxHistory>30</maxHistory>
            <totalSizeCap>500MB</totalSizeCap>
        </rollingPolicy>
    </appender>

    <!-- matching 도메인 로그 파일 저장-->
    <appender name="MATCHING_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${MATCHING_LOG_DIR}/spring-boot-log.log</file>

        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} --- %msg %n</pattern>
        </encoder>

        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${MATCHING_LOG_DIR}/spring-boot-log.%d{yyyy-MM-dd}_%i.log</fileNamePattern>
            <maxFileSize>50MB</maxFileSize>
            <maxHistory>30</maxHistory>
            <totalSizeCap>500MB</totalSizeCap>
        </rollingPolicy>
    </appender>

    <!-- member 도메인 로그 파일 저장-->
    <appender name="MEMBER_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${MEMBER_LOG_DIR}/spring-boot-log.log</file>

        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} --- %msg %n</pattern>
        </encoder>

        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${MEMBER_LOG_DIR}/spring-boot-log.%d{yyyy-MM-dd}_%i.log</fileNamePattern>
            <maxFileSize>50MB</maxFileSize>
            <maxHistory>30</maxHistory>
            <totalSizeCap>500MB</totalSizeCap>
        </rollingPolicy>
    </appender>

    <!-- notice 도메인 로그 파일 저장-->
    <appender name="NOTICE_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${NOTICE_LOG_DIR}/spring-boot-log.log</file>

        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} --- %msg %n</pattern>
        </encoder>

        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${NOTICE_LOG_DIR}/spring-boot-log.%d{yyyy-MM-dd}_%i.log</fileNamePattern>
            <maxFileSize>50MB</maxFileSize>
            <maxHistory>30</maxHistory>
            <totalSizeCap>500MB</totalSizeCap>
        </rollingPolicy>
    </appender>

    <!-- Configure the Sentry appender, overriding the logging threshold to the WARN level -->
    <appender name="Sentry" class="io.sentry.logback.SentryAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>WARN</level>
        </filter>
        <!-- Optionally add an encoder -->
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>

    <!-- 로컬 환경 -->
    <springProfile name="local">
        <!-- Enable the Console and Sentry appenders, Console is provided as an example
         of a non-Sentry logger that is set to a different logging threshold -->
        <root level="DEBUG">    <!-- 루트 패키지 포함정, 하위 모든 패키지 로그 수준 DEBUG -->
            <appender-ref ref="STDOUT"/>
            <appender-ref ref="ALL_FILE"/>
            <appender-ref ref="Sentry" />
        </root>
        <logger name="org.hibernate.SQL" level="DEBUG" additivity="false">     <!-- SQL 로그 -->
            <appender-ref ref="STDOUT"/>
            <appender-ref ref="ATTENDANCE_FILE"/>
        </logger>
        <logger name="org.hibernate.tool.hbm2ddl" level="DEBUG" additivity="false">    <!-- DDL 로그 -->
            <appender-ref ref="STDOUT"/>
            <appender-ref ref="CALCULATION_FILE"/>
        </logger>
        <logger name="org.hibernate.type" level="TRACE" additivity="false">    <!-- 파라미터 결과 로그 -->
            <appender-ref ref="STDOUT"/>
            <appender-ref ref="MATCHING_FILE"/>
        </logger>
        <logger name="org.hibernate.stat" level="DEBUG" additivity="false">    <!-- 결과 통계 로그 -->
            <appender-ref ref="STDOUT"/>
            <appender-ref ref="MEMBER_FILE"/>
        </logger>
        <logger name="org.hibernate.type.BasicTypeRegistry" level="WARN" additivity="false">   <!-- 불필요한 로그 수준 WARN으로 생략-->
            <appender-ref ref="STDOUT"/>
            <appender-ref ref="NOTICE_FILE"/>
        </logger>
    </springProfile>

    <!-- 운영 환경 -->
    <springProfile name="prod">
        <!-- Enable the Console and Sentry appenders, Console is provided as an example
         of a non-Sentry logger that is set to a different logging threshold -->
        <root level="DEBUG"><!-- 루트 패키지 포함정, 하위 모든 패키지 로그 수준 DEBUG -->
            <appender-ref ref="STDOUT"/>
            <appender-ref ref="ALL_FILE"/>
            <appender-ref ref="Sentry" />
        </root>

        <logger name="org.hibernate.SQL" level="DEBUG" additivity="false">     <!-- SQL 로그 -->
            <appender-ref ref="STDOUT"/>
            <appender-ref ref="ATTENDANCE_FILE"/>
        </logger>
        <logger name="org.hibernate.tool.hbm2ddl" level="DEBUG" additivity="false">    <!-- DDL 로그 -->
            <appender-ref ref="STDOUT"/>
            <appender-ref ref="CALCULATION_FILE"/>
        </logger>
        <logger name="org.hibernate.type" level="TRACE" additivity="false">    <!-- 파라미터 결과 로그 -->
            <appender-ref ref="STDOUT"/>
            <appender-ref ref="MATCHING_FILE"/>
        </logger>
        <logger name="org.hibernate.stat" level="DEBUG" additivity="false">    <!-- 결과 통계 로그 -->
            <appender-ref ref="STDOUT"/>
            <appender-ref ref="MEMBER_FILE"/>
        </logger>
        <logger name="org.hibernate.type.BasicTypeRegistry" level="WARN" additivity="false">   <!-- 불필요한 로그 수준 WARN으로 생략-->
            <appender-ref ref="STDOUT"/>
            <appender-ref ref="NOTICE_FILE"/>
        </logger>
    </springProfile>

</configuration>